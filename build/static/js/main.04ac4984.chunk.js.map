{"version":3,"sources":["helpers/fetch.tsx","redux/types/types.tsx","redux/reducers/uiReducer.tsx","redux/reducers/calendarReducer.tsx","redux/reducers/authReducer.tsx","redux/store.tsx","hooks/useForm.tsx","helpers/prepareEvents.tsx","redux/actions/eventActions.tsx","redux/actions/authActions.tsx","components/auth/LoginScreen.tsx","components/ui/Navbar.tsx","helpers/calendar-messages-es.tsx","components/calendar/CalendarEvent.tsx","redux/actions/uiActions.tsx","components/calendar/CalendarModal.tsx","components/ui/AddNewFab.tsx","components/ui/DeleteEventFab.tsx","components/calendar/CalendarScreen.tsx","router/PublicRoute.tsx","router/PrivateRoute.tsx","router/AppRouter.tsx","CalendarApp.tsx","reportWebVitals.ts","index.tsx"],"names":["httpMethod","types","initialState","modalOpen","events","activeEvent","checking","uid","name","rootReducer","combineReducers","ui","state","action","type","auth","payload","user","calendar","event","map","id","filter","store","createStore","compose","applyMiddleware","thunk","composeWithDevTools","useForm","useState","form","setForm","target","value","newFormState","baseUrl","process","fetchWithoutToken","endpoint","data","method","GET","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","prepareEvents","e","start","moment","toDate","end","eventStartAddNew","dispatch","getState","a","POST","resp","json","ok","_id","eventAddNew","console","log","eventClearActiveEvent","eventStartUpdate","PUT","eventUpdated","Swal","fire","msg","eventDeleted","eventLoaded","checkingFinish","login","startLogout","clear","logout","initialLoginState","loginEmail","loginPassword","initialRegisterState","registerName","registerEmail","registerPassword","registerRepeatPassword","LoginScreen","useDispatch","loginForm","handleLoginInputChange","registerForm","handleRegisterInputChange","className","onSubmit","email","password","preventDefault","setItem","Date","getTime","toString","autoComplete","placeholder","onChange","Navbar","useSelector","onClick","messages","allDay","previous","next","today","month","week","day","agenda","date","time","noEventsInRange","showMore","total","CalendarEvent","title","uiOpenModal","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","anotherHour","clone","notes","CalendarModal","startDateState","setStartDateState","endDateState","setEndDateState","validTitleState","setValidTitleState","formValuesState","setFormValuesState","useEffect","handleInputChange","closeModal","handleSubmitForm","momentStart","momentEnd","isSameOrAfter","trim","length","isOpen","onRequestClose","closeTimeoutMS","style","overlayClassName","format","amPmArialLabel","minDate","AddNewFab","DeleteEventFab","DELETE","locale","localizer","momentLocalizer","CalendarScreen","lastVieState","setLastVieState","startAccessor","endAccessor","popup","view","popupOffset","onSelectSlot","selectable","eventPropGetter","isSelected","backgroundColor","borderRadius","opacity","display","color","onDoubleClickEvent","onSelectEvent","onView","components","PublicRoute","isAuthenticated","Component","component","rest","props","to","prototype","PropTypes","bool","isRequired","func","PrivateRoute","AppRouter","exact","path","CalendarApp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.04ac4984.chunk.js","sourcesContent":["\nconst baseUrl = process.env.REACT_APP_API_URL;\n\nexport enum httpMethod {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    DELETE = 'DELETE',\n}\n\n\n\n\nexport const fetchWithoutToken = (endpoint: string, data: {}, method: httpMethod = httpMethod.GET) => {\n    const url = `${baseUrl}/${endpoint}`;\n\n    if (method === httpMethod.GET) {\n        return fetch(url);\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n}\n\nexport const fetchWithToken = (endpoint: string, data: {} = {}, method: httpMethod = httpMethod.GET) => {\n    const url = `${baseUrl}/${endpoint}`;\n    const token = localStorage.getItem('token') || '';\n\n\n    if (method === httpMethod.GET) {\n        return fetch(url, {\n            method,\n            headers: {\n                'x-token': token\n            }\n        });\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json',\n                'x-token': token,\n            },\n            body: JSON.stringify(data)\n        });\n    }\n\n}","\n\n\ninterface ITypes {\n    uiOpenModal: string;\n    uiCloseModal: string;\n\n    eventLogout: string;\n    eventStartAddNew: string;\n    eventSetActive: string;\n    eventAddNew: string;\n    eventClearActiveEvent: string;\n    eventUpdated: string;\n    eventDeleted: string;\n    eventLoaded: string;\n    \n    authCheckingFinish: string;\n    authStartLogin: string;\n    authLogin: string;\n    authStartRegister: string;\n    authStartRenewToken: string;\n    authLogout: string;\n}\n\n\nexport const types: ITypes = {\n    uiOpenModal: '[ui] Open Modal',\n    uiCloseModal: '[ui] Close Modal',\n\n    eventLogout: '[event] Logout Event',\n    eventStartAddNew: '[event] Start Add New Event',\n    eventSetActive: '[event] Set Active Event',\n    eventAddNew: '[event] Add New Event',\n    eventClearActiveEvent: '[event] Clear Active Event',\n    eventUpdated: '[event] Event updated',\n    eventDeleted: '[event] Event deleted',\n    eventLoaded: '[event] Event Loaded',\n\n    authCheckingFinish: '[auth] Finish checking login state',\n    authStartLogin: '[auth] Start login',\n    authLogin: '[auth] Login',\n    authStartRegister: '[auth] Start Register',\n    authStartRenewToken: '[auth] Start renew token',\n    authLogout: '[auth] Logout',\n}\n","import { types } from '../types/types';\n\ninterface IUIActions {\n    type: string;\n    payload?: {}\n}\n\nexport interface IUIReducer {\n    modalOpen: boolean;\n}\n\nconst initialState: IUIReducer = {\n    modalOpen: false,\n}\n\n\nexport const uiReducer = (state: IUIReducer = initialState, action: IUIActions) => {\n\n    switch (action.type) {\n        case types.uiOpenModal:\n            return {\n                ...state,\n                modalOpen: true\n            };\n\n        case types.uiCloseModal:\n            return {\n                ...state,\n                modalOpen: false,\n            };\n\n        default:\n            return state;\n    }\n}","import { types } from '../types/types';\n\nexport interface IUser {\n    _id: string;\n    name: string;\n}\nexport interface IEvent {\n    id?: number | null;\n    title: string;\n    start: any;\n    end: any;\n    bgcolor?: string;\n    allDay?: boolean;\n    notes?: string;\n    user?: IUser;\n}\nexport interface ICalendarReducer {\n    events: IEvent[],\n    activeEvent: null | IEvent;\n}\n\n// {\n//     id: new Date().getTime(),\n//     title: 'Birthdate of cheff',\n//     start: moment().toDate(),\n//     end: moment().add(1, 'hour').toDate(),\n//     bgcolor: '#fafafa',\n//     allDay: false,\n//     notes: 'Correr',\n//     user: {\n//         _id: '123',\n//         name: 'Alejandro'\n//     }\n// },\n\nconst initialState: ICalendarReducer = {\n    events: [],\n    activeEvent: null\n};\n\ninterface IUIActions {\n    type: string;\n    payload?: { event:  any } \n}\n\n\n\nexport const calendarReducer = (state: ICalendarReducer = initialState, action: IUIActions) => {\n\n    switch (action.type) {\n        case types.eventSetActive:\n            return {\n                ...state,\n                activeEvent: action.payload?.event,\n            }\n        case types.eventAddNew:\n            return {\n                ...state,\n                events: [action.payload?.event, ...state.events]\n            }\n\n        case types.eventClearActiveEvent:\n            return {\n                ...state,\n                activeEvent: null,\n            }\n\n        case types.eventUpdated:\n            return {\n                ...state,\n                events: state.events.map(event => event.id === action.payload?.event.id ? action.payload?.event : event)\n            }\n\n        case types.eventDeleted:\n            return {\n                ...state,\n                events: state.events.filter(event => event.id !== state.activeEvent?.id),\n                activeEvent: null,\n            }\n\n\n        case types.eventLoaded:\n            return {\n                ...state,\n                events: action.payload\n            }\n        case types.eventLogout:\n            return {\n               ...initialState\n            }    \n\n        default:\n            return state;\n    }\n\n}","import { types } from \"../types/types\";\n\nexport interface IAuthReducer {\n    checking?: boolean;\n    uid: string | null;\n    name: string | null;\n}\n\n\nconst initialState = {\n    checking: true,\n    uid: null,\n    name: null,\n}\n\ninterface IUIActions {\n    type: string;\n    payload: { user: IAuthReducer }\n}\n\nexport const authReducer = (state: IAuthReducer = initialState, action: IUIActions) => {\n    switch (action.type) {\n        case types.authLogin:\n            return {\n                ...state,\n                ...action.payload?.user,\n                checking: false,\n            }\n\n        case types.authCheckingFinish:\n            return {\n                ...state,\n                checking: false,\n            }\n\n        case types.authLogout:\n            return {\n                checking: false,\n                uid: null,\n                name: null,\n            }\n\n        default:\n            return state;\n    }\n}\n\n\n","\nimport { createStore, applyMiddleware, combineReducers, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { uiReducer, IUIReducer } from \"./reducers/uiReducer\";\nimport { calendarReducer, ICalendarReducer } from './reducers/calendarReducer';\nimport { authReducer, IAuthReducer } from './reducers/authReducer';\n\nexport interface IRootReducer {\n    ui: IUIReducer;\n    calendar:ICalendarReducer; \n    auth: IAuthReducer;\n}\n\n\nexport const rootReducer =  combineReducers({\n    ui: uiReducer,\n    auth: authReducer,\n    calendar: calendarReducer,\n})\n\n\nexport const store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(thunk),\n        composeWithDevTools()\n    )\n\n);","import { useState, ChangeEvent } from 'react';\n\n\n\nexport const useForm = <T extends Object>(initialState: T):any => {\n\n    const [form, setForm] = useState(initialState);\n\n    const reset = (newFormState = initialState) => {\n        setForm(newFormState);\n    }\n\n    const handleInputChange = ({ target }: ChangeEvent<HTMLInputElement | HTMLFormElement>):void => {\n        const { name, value } = target;\n        setForm({\n            ...form,\n            [name]: value\n        });\n\n    }\n\n    return [form, handleInputChange, reset];\n\n}\n\nexport default useForm;","import moment from \"moment\";\nimport { IEvent } from \"../redux/reducers/calendarReducer\";\n\nexport const prepareEvents = (events:IEvent[]) => {\n    \n    return events.map((e)=> ({\n        ...e,\n        start: moment(e.start).toDate(),\n        end: moment(e.end).toDate(),\n    }));\n}","import { Dispatch } from \"redux\";\nimport { types } from \"../types/types\";\nimport { IEvent } from \"../reducers/calendarReducer\";\nimport { fetchWithToken, httpMethod } from '../../helpers/fetch';\nimport { prepareEvents } from \"../../helpers/prepareEvents\";\nimport Swal from \"sweetalert2\";\n\nexport const eventStartAddNew = (event: any) => {\n    return async (dispatch: Dispatch, getState: any) => {\n        const { uid, name } = getState().auth;\n\n        try {\n            const resp = await fetchWithToken('events', event, httpMethod.POST);\n            const body = await resp.json();\n\n            if (body.ok) {\n                event.id = body.event.id;\n                event.user = {\n                    _id: uid,\n                    name: name,\n                }\n                dispatch(eventAddNew(event));\n            }\n\n        } catch (error) {\n            console.log(error);\n        }\n\n\n    }\n\n}\n\n\n\nconst eventAddNew = (event: IEvent) => ({\n    type: types.eventAddNew,\n    payload: { event },\n});\n\nexport const eventSetActiveEvent = (event: IEvent) => ({\n    type: types.eventSetActive,\n    payload: { event },\n});\n\nexport const eventClearActiveEvent = () => ({\n    type: types.eventClearActiveEvent\n});\n\n\n\nexport const eventStartUpdate = (event: IEvent) => {\n    return async (dispatch: Dispatch) => {\n        try {\n            const resp = await fetchWithToken(`events/${event.id}`, event, httpMethod.PUT);\n            const body = await  resp.json();\n            if(body.ok){\n                dispatch(eventUpdated(event));\n            }else{\n                Swal.fire('Error', body.msg, 'error');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst eventUpdated = (event: IEvent) => ({\n    type: types.eventUpdated,\n    payload: { event }\n});\n\n\nexport const eventStartDelete = () => {\n    return async(dispatch:Dispatch, getState:any) => {\n        const {id} = getState().calendar.activeEvent;\n        try {\n            const resp = await fetchWithToken(`events/${id}`,{}, httpMethod.DELETE);\n            const body = await  resp.json();\n            if(body.ok){\n                dispatch(eventDeleted());\n            }else{\n                Swal.fire('Error', body.msg, 'error');\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\n\n\nconst eventDeleted = () => ({\n    type: types.eventDeleted\n});\n\nexport const eventStartLoading = () => {\n    return async (dispatch: Dispatch) => {\n        try {\n            const resp = await fetchWithToken('events');\n            const body = await resp.json();\n            const events = prepareEvents(body.events);\n            dispatch(eventLoaded(events));\n\n        } catch (error) {\n            console.log(error);\n\n        }\n    }\n}\n\nconst eventLoaded = (events: IEvent[]) => ({\n    type: types.eventLoaded,\n    payload: events\n});\n\nexport const eventLogout = () => ({\n   type: types.eventLogout\n});\n\n\n\n","import { types } from \"../types/types\";\nimport { fetchWithoutToken, fetchWithToken, httpMethod } from '../../helpers/fetch';\nimport { IAuthReducer } from \"../reducers/authReducer\";\nimport Swal from \"sweetalert2\";\nimport { eventLogout } from './eventActions';\n\n\nexport const startChecking = () => {\n    return async (dispatch: any) => {\n        const resp = await fetchWithToken('auth/renewToken');\n        const body = await resp.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime().toString());\n            dispatch(login({\n                uid: body.uid,\n                name: body.name,\n            }));\n        } else {\n            // Swal.fire('Error', body.msg, 'error');\n            dispatch(checkingFinish());\n        }\n    }\n}\n\nconst checkingFinish = () => ({\n    type: types.authCheckingFinish\n});\n\n\n\nexport const startRegister = (email: string, password: string, name: string) => {\n    return async (dispatch: any) => {\n        const resp = await fetchWithoutToken('auth/newUser', { email, password, name }, httpMethod.POST);\n        const body = await resp.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime().toString());\n            dispatch(login({\n                uid: body.uid,\n                name: body.name,\n            }));\n        } else {\n            Swal.fire('Error', body.msg, 'error');\n        }\n    }\n}\n\nexport const startLogin = (email: string, password: string) => {\n    return async (dispatch: any) => {\n        const resp = await fetchWithoutToken('auth/loginUser', { email, password }, httpMethod.POST);\n        const body = await resp.json();\n        if (body.ok) {\n            localStorage.setItem('token', body.token);\n            localStorage.setItem('token-init-date', new Date().getTime().toString());\n            dispatch(login({\n                uid: body.uid,\n                name: body.name,\n            }));\n        } else {\n            Swal.fire('Error', body.msg, 'error');\n        }\n    }\n}\n\nconst login = (user: IAuthReducer) => ({\n    type: types.authLogin,\n    payload: { user }\n});\n\n\nexport const startLogout = () => {\n    return (dispatch:any) => {\n        localStorage.clear();\n        dispatch(eventLogout());\n        dispatch(logout());\n    }\n}\n\n\nconst logout = () => ({type: types.authLogout});","import React from 'react';\nimport useForm from '../../hooks/useForm';\nimport { useDispatch } from 'react-redux';\nimport { startLogin, startRegister } from '../../redux/actions/authActions';\nimport './login.css';\nimport Swal from 'sweetalert2';\n\nexport interface ILogin {\n    loginEmail: string;\n    loginPassword: string;\n}\n\nconst initialLoginState: ILogin = {\n    loginEmail: 'ale@gmail.com',\n    loginPassword: '123456'\n\n}\n\nexport interface IRegister {\n    registerName: string;\n    registerEmail: string;\n    registerPassword: string;\n    registerRepeatPassword: string;\n}\n\nconst initialRegisterState: IRegister = {\n    registerName: '',\n    registerEmail: '',\n    registerPassword: '',\n    registerRepeatPassword: '',\n}\n\n\nconst LoginScreen = () => {\n    const dispatch = useDispatch();\n    const [loginForm, handleLoginInputChange] = useForm<ILogin>(initialLoginState);\n    const [registerForm, handleRegisterInputChange] = useForm<IRegister>(initialRegisterState);\n\n    const handleLogin = (e: any) => {\n        e.preventDefault();\n        dispatch(startLogin(loginForm.loginEmail, loginForm.loginPassword))\n    }\n\n    const handleRegister = (e: any) => {\n        e.preventDefault();\n       \n        if(registerForm.registerPassword !== registerForm.registerRepeatPassword){\n            return Swal.fire('Error', 'Passwords must be equals', 'error');\n        }\n\n        dispatch(startRegister(registerForm.registerEmail, registerForm.registerPassword, registerForm.registerName));\n    }\n\n    return (\n        <div className=\"container login-container\">\n            <div className=\"row\">\n                <div className=\"col-md-6 login-form-1\">\n                    <h3>Ingreso</h3>\n                    <form onSubmit={handleLogin} >\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Email\"\n                                name=\"loginEmail\"\n                                value={loginForm.loginEmail}\n                                onChange={handleLoginInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Password\"\n                                name=\"loginPassword\"\n                                value={loginForm.loginPassword}\n                                onChange={handleLoginInputChange}\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"submit\"\n                                className=\"btnSubmit\"\n                                value=\"Login\"\n                            />\n                        </div>\n                    </form>\n                </div>\n\n                <div className=\"col-md-6 login-form-2\">\n                    <h3>Registro</h3>\n                    <form onSubmit={handleRegister}>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"text\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Name\"\n                                onChange={handleRegisterInputChange}\n                                value={registerForm.registerName}\n                                name=\"registerName\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"email\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Email\"\n                                onChange={handleRegisterInputChange}\n                                value={registerForm.registerEmail}\n                                name=\"registerEmail\"\n                            />\n                        </div>\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Password\"\n                                onChange={handleRegisterInputChange}\n                                value={registerForm.registerPassword}\n                                name=\"registerPassword\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"password\"\n                                autoComplete=\"false\"\n                                className=\"form-control\"\n                                placeholder=\"Repeat password\"\n                                onChange={handleRegisterInputChange}\n                                value={registerForm.registerRepeatPassword}\n                                name=\"registerRepeatPassword\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <input\n                                type=\"submit\"\n                                className=\"btnSubmit\"\n                                value=\"Create account\" />\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default LoginScreen;","import { useDispatch, useSelector } from 'react-redux';\nimport { startLogout } from '../../redux/actions/authActions';\nimport { IRootReducer } from '../../redux/store';\n\nconst Navbar = () => {\n    const { name } = useSelector((state: IRootReducer) => state.auth);\n    const dispatch = useDispatch();\n\n    const handleLogout = () => {\n        dispatch(startLogout());\n    }\n\n    return (\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\n            <span className=\"navbar-brand\">\n                {name}\n            </span>\n\n            <button\n                className=\"btn btn-outline-danger\"\n                onClick={handleLogout}\n            >\n                <i className=\"fas fa-sign-out-alt\"></i>\n                <span> Exit</span>\n            </button>\n        </div>\n    )\n}\nexport default Navbar;","export const messages = {\n    allDay: 'Todo el día',\n    previous: '<',\n    next: '>',\n    today: 'Hoy',\n    month: 'Mes',\n    week: 'Semana',\n    day: 'Día',\n    agenda: 'Agenda',\n    date: 'Fecha',\n    time: 'Hora',\n    event: 'Evento',\n    noEventsInRange: 'No hay eventos en este rango',\n    showMore: (total:number) => `+ Ver más (${total})`\n};","import React from 'react'\n\nconst CalendarEvent = ({event}:any) => {\n    const {title, user} = event;\n\n    return (\n        <div>\n          <strong>{title}</strong> \n          <span> - {user.name}</span>\n        </div>\n    )\n}\n\nexport default CalendarEvent;\n","import { types } from \"../types/types\";\n\n\nexport const uiOpenModal = () => {\n    return {type: types.uiOpenModal};\n};\n\nexport const uiCloseModal = () => {\n    return {type: types.uiCloseModal};\n};","// import ReactDOM from 'react-dom';\n// @ts-ignore\nimport DateTimePicker from 'react-datetime-picker';\nimport Swal from 'sweetalert2';\nimport Modal from 'react-modal';\nimport moment from 'moment';\nimport { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { IRootReducer } from '../../redux/store';\nimport { uiCloseModal } from '../../redux/actions/uiActions';\nimport { eventStartAddNew, eventClearActiveEvent, eventStartUpdate } from '../../redux/actions/eventActions';\nimport { IEvent } from '../../redux/reducers/calendarReducer';\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        transform: 'translate(-50%, -50%)',\n    },\n};\n\nModal.setAppElement('#root');\n\nconst now = moment().minutes(0).seconds(0).add(1, 'hours');\nconst anotherHour = now.clone().add(1, 'hours');\n\nconst initialState: IEvent = {\n    id: null,\n    title: '',\n    notes: '',\n    start: now.toDate(),\n    end: anotherHour.toDate(),\n}\n\nconst CalendarModal = () => {    \n    const dispatch = useDispatch();\n    const { modalOpen } = useSelector((state: IRootReducer) => state.ui);\n    const { activeEvent } = useSelector((state: IRootReducer) => state.calendar);\n\n    const [startDateState, setStartDateState] = useState(now.toDate());\n    const [endDateState, setEndDateState] = useState(anotherHour.toDate());\n    const [validTitleState, setValidTitleState] = useState<boolean>(true);\n    const [formValuesState, setFormValuesState] = useState<IEvent>(initialState);\n\n    const { notes, title, start, end } = formValuesState;\n\n\n    useEffect(() => {\n        if (activeEvent) {\n            setFormValuesState(activeEvent);\n        }else{\n            setFormValuesState(initialState);\n        }\n\n\n    }, [activeEvent, setFormValuesState]);\n\n\n\n    const handleInputChange = ({ target }: any) => {\n        setFormValuesState({\n            ...formValuesState,\n            [target.name]: target.value,\n        });\n    }\n\n    const closeModal = () => {\n        dispatch(uiCloseModal());\n        setFormValuesState(initialState);\n        dispatch(eventClearActiveEvent());\n    }\n\n    const handleStartDateChange = (e: any) => {\n        setStartDateState(e);\n        setFormValuesState({\n            ...formValuesState,\n            start: e,\n        });\n    }\n    const handleEndDateChange = (e: any) => {\n        setEndDateState(e);\n        setFormValuesState({\n            ...formValuesState,\n            end: e,\n        });\n    }\n\n    const handleSubmitForm = async (e: any) => {\n        e.preventDefault();\n        const momentStart = moment(startDateState);\n        const momentEnd = moment(endDateState);\n\n        if (momentStart.isSameOrAfter(momentEnd)) {\n            return await Swal.fire('Error', 'End date must be grater than Start date', 'error');\n        }\n\n        if (title.trim().length < 2) {\n            return setValidTitleState(false);\n        }\n\n        if (activeEvent) {\n            dispatch(eventStartUpdate(formValuesState))\n        } else {\n            dispatch(eventStartAddNew(formValuesState));\n        }\n        // TODO save info in db\n        setValidTitleState(true);\n        closeModal();\n\n    }\n\n\n    return (\n        <Modal\n            isOpen={modalOpen}\n            onRequestClose={closeModal}\n            closeTimeoutMS={200}\n            style={customStyles}\n            className=\"modal\"\n            overlayClassName=\"modal-background\"\n        >\n            <h1> {(activeEvent)? 'Edit event': 'New event'}</h1>\n            <hr />\n            <form\n                className=\"container\"\n                onSubmit={handleSubmitForm}\n            >\n                <div className=\"form-group\">\n                    <label>Start date and time</label>\n                    <DateTimePicker\n                        onChange={handleStartDateChange}\n                        value={start}\n                        className=\"form-control\"\n                        format=\"y-MM-dd hh:mm a\"\n                        amPmArialLabel=\"Select AM/PM\"\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>End date and time</label>\n                    <DateTimePicker\n                        onChange={handleEndDateChange}\n                        value={end}\n                        minDate={start}\n                        className=\"form-control\"\n                        format=\"y-MM-dd hh:mm a\"\n                        amPmArialLabel=\"Select AM/PM\"\n                    />\n                </div>\n                <hr />\n                <div className=\"form-group\">\n                    <label>Title and Notes</label>\n                    <input\n                        type=\"text\"\n                        className={`form-control ${!validTitleState && 'is-invalid'}`}\n                        placeholder=\"Título del evento\"\n                        name=\"title\"\n                        value={title}\n                        onChange={handleInputChange}\n                        autoComplete=\"off\"\n                    />\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Una descripción corta</small>\n                </div>\n\n                <div className=\"form-group\">\n                    <textarea\n                        // type=\"text\"\n                        className=\"form-control\"\n                        placeholder=\"Notas\"\n                        // rows=\"5\"\n                        name=\"notes\"\n                        value={notes}\n                        onChange={handleInputChange}\n                    ></textarea>\n                    <small id=\"emailHelp\" className=\"form-text text-muted\">Información adicional</small>\n                </div>\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-primary btn-block\"\n                >\n                    <i className=\"far fa-save\"></i>\n                    <span> Guardar</span>\n                </button>\n\n            </form>\n        </Modal>\n    )\n}\nexport default CalendarModal;","\n\nimport React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { uiOpenModal } from '../../redux/actions/uiActions';\nimport { eventClearActiveEvent } from '../../redux/actions/eventActions';\n\nconst AddNewFab = () => {\n    const dispatch = useDispatch();\n\n    const handleOnClick = (e: any) => {\n        // dispatch(eventClearActiveEvent);\n        dispatch(eventClearActiveEvent());\n        dispatch(uiOpenModal());\n\n    }\n\n    return (\n        <button\n            onClick={handleOnClick}\n            className=\"btn btn-primary fab\"\n        >\n            <i className=\"fas fa-plus\"></i>\n        </button>\n    )\n}\n\n\nexport default AddNewFab;","\n\nimport React from 'react'\nimport { useDispatch } from 'react-redux';\nimport { eventStartDelete } from '../../redux/actions/eventActions';\n\nconst DeleteEventFab = () => {\n    const dispatch = useDispatch();\n\n    const handleOnClick = (e: any) => {\n        dispatch(eventStartDelete());\n    }\n\n    return (\n        <button\n            onClick={handleOnClick}\n            className=\"btn btn-danger fab-danger\"\n        >\n            <i className=\"fas fa-trash\"></i>\n           \n            <span> Delete Event</span>\n        </button>\n    )\n}\n\n\nexport default DeleteEventFab;","import moment from 'moment';\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\n\nimport { useEffect, useState } from 'react'\nimport Navbar from '../ui/Navbar';\nimport { messages } from '../../helpers/calendar-messages-es';\nimport CalendarEvent from './CalendarEvent';\n\nimport 'moment/locale/es';\nimport CalendarModal from './CalendarModal';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uiOpenModal } from '../../redux/actions/uiActions';\nimport { eventSetActiveEvent, eventClearActiveEvent, eventStartLoading } from '../../redux/actions/eventActions';\nimport { IEvent } from '../../redux/reducers/calendarReducer';\nimport AddNewFab from '../ui/AddNewFab';\nimport { IRootReducer } from '../../redux/store';\nimport DeleteFab from '../ui/DeleteEventFab';\nmoment.locale('es');\n\n\n\nconst localizer = momentLocalizer(moment);\n\nconst CalendarScreen = () => {\n    const dispatch = useDispatch();\n    const { events, activeEvent } = useSelector((state: IRootReducer) => state.calendar);\n    const { uid } = useSelector((state:IRootReducer) => state.auth);\n    const [lastVieState, setLastVieState] = useState<any>(localStorage.getItem('lastView') || 'month');\n    useEffect(() => {\n        dispatch(eventStartLoading());\n        \n    }, [dispatch]);\n\n   \n    const onDoubleClick = (e: any) => {\n        dispatch(uiOpenModal());\n    }\n\n    const onSelectEvent = (e: IEvent) => {\n        dispatch(eventSetActiveEvent(e));\n    }\n\n    const onViewChange = (e: any) => {\n        setLastVieState(e);\n        localStorage.setItem('lastView', e);\n    }\n\n   \n\n    const eventStyleGetter = (event: IEvent, start: any, end: any, isSelected: boolean) => {\n\n        const style = {           \n            backgroundColor: (uid === event.user?._id) ? '#367cf7' : '#465660',\n            borderRadius: '0px',\n            opacity: .8,\n            display: 'block',\n            color: 'white'\n    \n        };\n        return {\n            className: 'ale',\n            style: style\n        }\n    }\n\n    const onSelectSlot = (e:any) => {\n        dispatch(eventClearActiveEvent());\n    }\n\n    return (\n        <div className=\"calendar-screen\">\n            <Navbar />\n            <Calendar\n                localizer={localizer}\n                events={events}\n                startAccessor=\"start\"\n                endAccessor=\"end\"\n                popup={true}\n                view={lastVieState}\n                popupOffset={30}\n                onSelectSlot={onSelectSlot}\n                selectable={true}\n                eventPropGetter={eventStyleGetter}\n                messages={messages}\n                onDoubleClickEvent={onDoubleClick}\n                onSelectEvent={onSelectEvent}\n                onView={onViewChange}\n                components={{\n                    event: CalendarEvent\n                }}\n            />\n            <AddNewFab />\n            {\n                (activeEvent) && <DeleteFab />\n            }\n            <CalendarModal />\n        </div>\n    )\n}\n\nexport default CalendarScreen;\n","import { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const PublicRoute = ({ isAuthenticated, component:Component, ...rest }: any) => {\n    \n    return (        \n        <Route {...rest}\n            component={(props: any) => (\n                (isAuthenticated)\n                    ? <Redirect to=\"/\" />\n                    : <Component {...props} />\n                     \n            )}\n        />\n    )\n}\n\nPublicRoute.prototype = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired,\n}\n\n\n\n\n","import { Route, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const PrivateRoute = ({ isAuthenticated, component: Component, ...rest }: any) => {\n    \n    // localStorage.setItem('lastPath', rest.location.pathname);\n    \n    return (\n        <Route {...rest}\n            component={(props: any) => (\n                (isAuthenticated)\n                    ? <Component {...props} />\n                    : <Redirect to=\"/login\" />\n            )}\n        />\n    )\n}\n\nPrivateRoute.prototype = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired,\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\nimport LoginScreen from '../components/auth/LoginScreen';\nimport CalendarScreen from '../components/calendar/CalendarScreen';\nimport { startChecking } from '../redux/actions/authActions';\nimport { IRootReducer } from '../redux/store';\nimport { PublicRoute } from './PublicRoute';\nimport { PrivateRoute } from './PrivateRoute';\n\nconst AppRouter = () => {\n    const dispatch = useDispatch();\n    const { checking, uid } = useSelector((state: IRootReducer) => state.auth);\n\n    useEffect(()=>{\n        dispatch(startChecking());\n    }, [dispatch]);\n\n    if(checking){\n        return (<h5>Wait...</h5>);\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <PublicRoute exact path=\"/login\" component={LoginScreen} isAuthenticated={!!uid} />\n                    <PrivateRoute exact path=\"/\" component={CalendarScreen} isAuthenticated={!!uid} />\n                    <Redirect to=\"/\" />\n                </Switch>\n            </div>\n        </Router>\n    )\n}\nexport default AppRouter;","import React from 'react'\nimport { store } from './redux/store';\nimport AppRouter from './router/AppRouter';\nimport { Provider } from 'react-redux';\n\nconst CalendarApp = () => {\n  return (\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  )\n}\n\nexport default CalendarApp;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CalendarApp from './CalendarApp';\nimport reportWebVitals from './reportWebVitals';\nimport './styles.css';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <CalendarApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}